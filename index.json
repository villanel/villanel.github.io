[{"content":"K3s with clilium and loki Install k3s and disable default CNI curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\u0026#39;--flannel-backend=none --disable-network-policy\u0026#39; sh - then you can add agent nodes also,you can find node-token at /var/lib/rancher/k3s/server/node-token,and install k3s agent nodes with follow commend.\ncurl -sfL https://get.k3s.io | K3S_URL=\u0026#39;https://${MASTER_IP}:6443\u0026#39; K3S_TOKEN=${NODE_TOKEN} sh - Install the Cilium with the Cilium CLI curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum} sha256sum --check cilium-linux-amd64.tar.gz.sha256sum sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin rm cilium-linux-amd64.tar.gz{,.sha256sum} Install Cilium by running:\ncilium install # install hubble  cilium hubble enable --ui Running the following command to check out:\ncilium status cilium connectivity test Install loki with grafana and prometheus by helm helm upgrade --install loki --namespace=\u0026lt;YOUR-NAMESPACE\u0026gt; grafana/loki-stack --set grafana.enabled=true,prometheus.enabled=true,prometheus.alertmanager.persistentVolume.enabled=false,prometheus.server.persistentVolume.enabled=false Get the passwd of grafana\nkubectl get secret --namespace \u0026lt;YOUR-NAMESPACE\u0026gt; loki-grafana -o jsonpath=\u0026#34;{.data.admin-password}\u0026#34; | base64 --decode ; echo ","permalink":"https://villanel.github.io/post/k3s/","summary":"K3s with clilium and loki Install k3s and disable default CNI curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\u0026#39;--flannel-backend=none --disable-network-policy\u0026#39; sh - then you can add agent nodes also,you can find node-token at /var/lib/rancher/k3s/server/node-token,and install k3s agent nodes with follow commend.\ncurl -sfL https://get.k3s.io | K3S_URL=\u0026#39;https://${MASTER_IP}:6443\u0026#39; K3S_TOKEN=${NODE_TOKEN} sh - Install the Cilium with the Cilium CLI curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum} sha256sum --check cilium-linux-amd64.tar.gz.sha256sum sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin rm cilium-linux-amd64.tar.gz{,.sha256sum} Install Cilium by running:","title":"K3s on the cloud"},{"content":"Flink in Native Kubernetes deploy flink in the Session Mode flink will deploy in the namespace default as default and use default as serviceaccount, if we want deploy in another namespace, we can set kubernetes.namespace. and we should modify the serviceacount.We either modify the permissions of default or create a new serviceAccount.\ncreate serviceaccount flink-service-account $ kubectl create serviceaccount flink-service-account $ kubectl create clusterrolebinding flink-role-binding-flink --clusterrole=edit --serviceaccount=default:flink-service-account delpoy the flink ./bin/kubernetes-session.sh -Dkubernetes.cluster-id=first\\  -Dkubernetes.service-account=flink-service-account \\  -Dtaskmanager.memory.process.size=4096m \\  -Dtaskmanager.numberOfTaskSlots=2 \\  -Dresourcemanager.taskmanager-timeout=3600000 flink will create taskmanger when a job was submitted, resources will be requested before taskmanger starts, and the usage of cpu is set to the number of slots per TaskManager by default. before submit we need to make sure that we can reach the jobmanger. we can set service in the type of NodePort\nsubmit the job ./bin/flink run -d -e kubernetes-session -Dkubernetes.cluster-id=first examples/streaming/WindowJoin.jar relate config\nNative Kubernetes\n","permalink":"https://villanel.github.io/post/fuck/","summary":"Flink in Native Kubernetes deploy flink in the Session Mode flink will deploy in the namespace default as default and use default as serviceaccount, if we want deploy in another namespace, we can set kubernetes.namespace. and we should modify the serviceacount.We either modify the permissions of default or create a new serviceAccount.\ncreate serviceaccount flink-service-account $ kubectl create serviceaccount flink-service-account $ kubectl create clusterrolebinding flink-role-binding-flink --clusterrole=edit --serviceaccount=default:flink-service-account delpoy the flink .","title":"flink"}]